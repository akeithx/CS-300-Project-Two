Big O Values for my pseudocode calculated using example runtime analysis chart
Uses the code required to open file, read data and read each line as counted
Vector: 4n + 1
Hash Table: 4n + 1
Tree: 4n + 1

There are many differences between these structures. Starting with a vector, which acts like a simple list. This would be easy for administrators to add and edit courses with ease. They can be slow and resource wasteful.
Binary trees are more cache friendly and are useful for conservative utilization of resources. This does complicate editing, removing, and adding courses however since this list is out of order and requires a search to find the correct entry. 
Hash tables use hash keys to determine where values are. It does this with great speed and is easy to delete and add courses. The upkeep of this system is much more intensive as hash tables are complicated to set up.

After analyzing the situation and how these three data structures are utilized, I have come to the conclusion that a vector is the best structure for this situation. I have come to this conclusion that since resource utilization is not an issue and that courses need to be added, removed, edited and retrieved often that the simplest solution is the best one. My big O analysis yielded the same results. Vectors however may be a bit slower, and it may take up a little more resources, but when it comes to listing the courses in order and having easy ways to interact with the data is best and for that reason vectors are best to be used here.
